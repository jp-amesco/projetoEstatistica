!function(){return function r(n,t,e){function i(u,f){if(!t[u]){if(!n[u]){var a="function"==typeof require&&require;if(!f&&a)return a(u,!0);if(o)return o(u,!0);var c=new Error("Cannot find module '"+u+"'");throw c.code="MODULE_NOT_FOUND",c}var s=t[u]={exports:{}};n[u][0].call(s.exports,function(r){return i(n[u][1][r]||r)},s,s.exports,r,n,t,e)}return t[u].exports}for(var o="function"==typeof require&&require,u=0;u<e.length;u++)i(e[u]);return i}}()({1:[function(r,n,t){"use strict";var e=r("./dados/entradaDados.js"),i=r("./dados/identificaVariavel.js"),o=r("./erros/mensagemErroValidacaoDados.js");document.querySelector(".btn").addEventListener("click",function(){var r=document.querySelector("#dados").value,n=e.init(r),t=void 0;1==n||2==n?o.init(n):t=i.init(n),n.sort(),"qualitativa"==t&&console.log("foi"),console.log(n)})},{"./dados/entradaDados.js":2,"./dados/identificaVariavel.js":3,"./erros/mensagemErroValidacaoDados.js":4}],2:[function(r,n,t){"use strict";t.init=function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,n=0,t=0;if(null==r||r.length<=1)return"Quantidade de dados insuficiente para os c치lculos";for(var e=r.split(",").map(function(r){return r.trim()}),i=0;i<e.length;i++)isNaN(e[i])&&n++,isNaN(e[i])||(t++,e[i]=parseInt(e[i]));return n>0&&t>0?"Dados inv치lidos":e}},{}],3:[function(r,n,t){"use strict";t.init=function(r){var n=[];if("string"==typeof r[0])return"qualitativa";for(var t=0;t<r.length;t++)-1==n.indexOf(r[t])&&n.push(r[t]);return n.length<7?"discreta":n.length>=7&&n.length<=10?"pergunta":"continua"}},{}],4:[function(r,n,t){"use strict";t.init=function(){}},{}]},{},[1])(function(){return function r(n,t,e){function i(u,f){if(!t[u]){if(!n[u]){var a="function"==typeof require&&require;if(!f&&a)return a(u,!0);if(o)return o(u,!0);var c=new Error("Cannot find module '"+u+"'");throw c.code="MODULE_NOT_FOUND",c}var s=t[u]={exports:{}};n[u][0].call(s.exports,function(r){return i(n[u][1][r]||r)},s,s.exports,r,n,t,e)}return t[u].exports}for(var o="function"==typeof require&&require,u=0;u<e.length;u++)i(e[u]);return i}})()({1:[function(r,n,t){"use strict";t.init=function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,n=0,t=0;if(null==r||r.length<=1)return"Quantidade de dados insuficiente para os c치lculos";for(var e=r.split(",").map(function(r){return r.trim()}),i=0;i<e.length;i++)isNaN(e[i])&&n++,isNaN(e[i])||(t++,e[i]=parseInt(e[i]));return n>0&&t>0?"Dados inv치lidos":e}},{}]},{},[1])(function(){return function r(n,t,e){function i(u,f){if(!t[u]){if(!n[u]){var a="function"==typeof require&&require;if(!f&&a)return a(u,!0);if(o)return o(u,!0);var c=new Error("Cannot find module '"+u+"'");throw c.code="MODULE_NOT_FOUND",c}var s=t[u]={exports:{}};n[u][0].call(s.exports,function(r){return i(n[u][1][r]||r)},s,s.exports,r,n,t,e)}return t[u].exports}for(var o="function"==typeof require&&require,u=0;u<e.length;u++)i(e[u]);return i}})()({1:[function(r,n,t){"use strict";t.init=function(r){var n=[];if("string"==typeof r[0])return"qualitativa";for(var t=0;t<r.length;t++)-1==n.indexOf(r[t])&&n.push(r[t]);return n.length<7?"discreta":n.length>=7&&n.length<=10?"pergunta":"continua"}},{}]},{},[1])(function(){return function r(n,t,e){function i(u,f){if(!t[u]){if(!n[u]){var a="function"==typeof require&&require;if(!f&&a)return a(u,!0);if(o)return o(u,!0);var c=new Error("Cannot find module '"+u+"'");throw c.code="MODULE_NOT_FOUND",c}var s=t[u]={exports:{}};n[u][0].call(s.exports,function(r){return i(n[u][1][r]||r)},s,s.exports,r,n,t,e)}return t[u].exports}for(var o="function"==typeof require&&require,u=0;u<e.length;u++)i(e[u]);return i}})()({1:[function(r,n,t){"use strict";t.init=function(){}},{}]},{},[1])(function(){return function r(n,t,e){function i(u,f){if(!t[u]){if(!n[u]){var a="function"==typeof require&&require;if(!f&&a)return a(u,!0);if(o)return o(u,!0);var c=new Error("Cannot find module '"+u+"'");throw c.code="MODULE_NOT_FOUND",c}var s=t[u]={exports:{}};n[u][0].call(s.exports,function(r){return i(n[u][1][r]||r)},s,s.exports,r,n,t,e)}return t[u].exports}for(var o="function"==typeof require&&require,u=0;u<e.length;u++)i(e[u]);return i}})()({1:[function(r,n,t){},{}]},{},[1])(function(){return function r(n,t,e){function i(u,f){if(!t[u]){if(!n[u]){var a="function"==typeof require&&require;if(!f&&a)return a(u,!0);if(o)return o(u,!0);var c=new Error("Cannot find module '"+u+"'");throw c.code="MODULE_NOT_FOUND",c}var s=t[u]={exports:{}};n[u][0].call(s.exports,function(r){return i(n[u][1][r]||r)},s,s.exports,r,n,t,e)}return t[u].exports}for(var o="function"==typeof require&&require,u=0;u<e.length;u++)i(e[u]);return i}})()({1:[function(r,n,t){"use strict";t.init=function(r){for(var n=[],t=[],e=0,i=0;i<r.length;i++)-1==n.indexOf(r[i])&&n.push(r[i]);for(var o=0;o<n.length;o++){for(var u=0;u<r.length;u++)n[o]==r[u]&&e++;t.push(e),e=0}for(var f=void 0,a=t[0],c=0;c<t.length;c++)t[c]>a&&(a=t[c],f=c);return n[f]}},{}]},{},[1])(function(){return function r(n,t,e){function i(u,f){if(!t[u]){if(!n[u]){var a="function"==typeof require&&require;if(!f&&a)return a(u,!0);if(o)return o(u,!0);var c=new Error("Cannot find module '"+u+"'");throw c.code="MODULE_NOT_FOUND",c}var s=t[u]={exports:{}};n[u][0].call(s.exports,function(r){return i(n[u][1][r]||r)},s,s.exports,r,n,t,e)}return t[u].exports}for(var o="function"==typeof require&&require,u=0;u<e.length;u++)i(e[u]);return i}})()({1:[function(r,n,t){},{}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
