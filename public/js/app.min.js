!function(){return function t(n,i,a){function e(o,u){if(!i[o]){if(!n[o]){var s="function"==typeof require&&require;if(!u&&s)return s(o,!0);if(r)return r(o,!0);var d=new Error("Cannot find module '"+o+"'");throw d.code="MODULE_NOT_FOUND",d}var l=i[o]={exports:{}};n[o][0].call(l.exports,function(t){return e(n[o][1][t]||t)},l,l.exports,t,n,i,a)}return i[o].exports}for(var r="function"==typeof require&&require,o=0;o<a.length;o++)e(a[o]);return e}}()({1:[function(t,n,i){"use strict";var a=t("./dados/entradaDados.js"),e=t("./dados/identificaVariavel.js"),r=t("./moda/modaQualitativa.js"),o=t("./frequencia.js");t("./media/mediaQuantitativaDiscreta.js"),t("./mediana/medianaQuantitativaDiscreta.js"),t("./intervaloClasse.js"),t("./mediana/medianaQuantitativaContinua.js");document.querySelector(".btn").addEventListener("click",function(){var t=document.querySelector("#dados").value,n=a.init(t),i=void 0;if(1==n||2==n);else{i=e.init(n),n.sort();var u=o.init(n);"qualitativa"==i&&r.init(u)}})},{"./dados/entradaDados.js":2,"./dados/identificaVariavel.js":3,"./frequencia.js":4,"./intervaloClasse.js":5,"./media/mediaQuantitativaDiscreta.js":6,"./mediana/medianaQuantitativaContinua.js":7,"./mediana/medianaQuantitativaDiscreta.js":8,"./moda/modaQualitativa.js":9}],2:[function(t,n,i){"use strict";i.init=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,n=0,i=0;if(null==t||t.length<=1)return"Quantidade de dados insuficiente para os cálculos";for(var a=t.split(",").map(function(t){return t.trim()}),e=0;e<a.length;e++)isNaN(a[e])&&n++,isNaN(a[e])||(i++,a[e]=parseInt(a[e]));return n>0&&i>0?"Dados inválidos":a}},{}],3:[function(t,n,i){"use strict";i.init=function(t){var n=[];if("string"==typeof t[0])return"qualitativa";for(var i=0;i<t.length;i++)-1==n.indexOf(t[i])&&n.push(t[i]);return n.length<7?"discreta":n.length>=7&&n.length<=10?"pergunta":"continua"}},{}],4:[function(t,n,i){"use strict";i.init=function(t){for(var n=[],i=[],a=[],e=0,r=0;r<t.length;r++)-1==n.indexOf(t[r])&&n.push(t[r]);for(var o=0;o<n.length;o++){for(var u=0;u<t.length;u++)n[o]==t[u]&&e++;i.push(e),e=0}return a.push(i,n),a}},{}],5:[function(t,n,i){"use strict";i.init=function(){var t=[47,50,55,58,61,61,61,65,65,65,66,66,67,67,68,68,69,71,71,71,72,72,73,76,78,80,82,90,98,100],n=t[t.length-1]-t[0]+1,i=Math.sqrt(n),a=0,e=0,r=void 0,o={};do{n%(Math.round(i)-1)==0?(r=n/(e=n/(Math.round(i)-1)),a++):n%Math.round(i)==0?(r=n/(e=n/Math.round(i)),a++):n%(Math.round(i)+1)==0&&(r=n/(e=n/(Math.round(i)+1)),a++),n++}while(0==a);return o.intervalo=e,o.quantClasse=r,console.log(o),o}},{}],6:[function(t,n,i){"use strict";i.init=function(t){for(var n=0,i=0;i<t.length;i++)n+=t[i];return n/t.length}},{}],7:[function(t,n,i){"use strict";function a(t,n,i){for(var a=t.length/2,e=t[a],r={},o=void 0,u=void 0,s=void 0,d=[],l=1,c=0;c<t.length;c++)t[c]<t[0]+i.intervalo*l?d.push(t[c]):(r["classe"+l]=d,d=[t[c]],l++);r["classe"+l]=d;for(var f=0;f<i.quantClasse;f++)if(-1!=r["classe"+(f+1)].indexOf(e)){o=t[0]+i.intervalo*f,u=n[f-1],s=r["classe"+(f+1)].length;break}return o+(a-u)/s-i.intervalo}console.log(a()),i.init=a},{}],8:[function(t,n,i){"use strict";i.init=function(t){var n=0;return t.length%2==0?t[n=t.length/2-1]!=t[n+1]?(t[n]+t[n+1])/2:t[n]:t[n=Math.round(t.length/2-1)]}},{}],9:[function(t,n,i){"use strict";i.init=function(t){for(var n=t[0],i=t[1],a=n[0],e=void 0,r=0;r<n.length;r++)n[r]>a&&(a=n[r],e=i[r]);return e}},{}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
